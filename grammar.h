#ifndef GRAMMAR_H
#define GRAMMAR_H
#include "parserDef.h"
struct ruleRightSideElement otherFunctions = {false, false, .symbol.nonTerminal = NT_OtherFunctions};
struct ruleRightSideElement mainFunction = {false, false, .symbol.nonTerminal = NT_MainFunction};
RuleRightSideElement rhs0[] = {&otherFunctions, &mainFunction, };
struct rule rule0 = {.lhs = NT_Program, .rhs = rhs0, .rhsLength = 2};
struct ruleRightSideElement tk_main = {false, true, .symbol.terminal = TK_MAIN};
struct ruleRightSideElement stmts = {false, false, .symbol.nonTerminal = NT_Stmts};
struct ruleRightSideElement tk_end = {false, true, .symbol.terminal = TK_END};
RuleRightSideElement rhs1[] = {&tk_main, &stmts, &tk_end, };
struct rule rule1 = {.lhs = NT_MainFunction, .rhs = rhs1, .rhsLength = 3};
struct ruleRightSideElement function = {false, false, .symbol.nonTerminal = NT_Function};
RuleRightSideElement rhs2[] = {&function, &otherFunctions, };
struct rule rule2 = {.lhs = NT_OtherFunctions, .rhs = rhs2, .rhsLength = 2};
struct ruleRightSideElement eps = {true, true, .symbol.terminal = TK_ID};
RuleRightSideElement rhs3[] = {&eps, };
struct rule rule3 = {.lhs = NT_OtherFunctions, .rhs = rhs3, .rhsLength = 1};
struct ruleRightSideElement tk_funid = {false, true, .symbol.terminal = TK_FUNID};
struct ruleRightSideElement inputPar = {false, false, .symbol.nonTerminal = NT_InputPar};
struct ruleRightSideElement outputPar = {false, false, .symbol.nonTerminal = NT_OutputPar};
struct ruleRightSideElement tk_sem = {false, true, .symbol.terminal = TK_SEM};
RuleRightSideElement rhs4[] = {&tk_funid, &inputPar, &outputPar, &tk_sem, &stmts, &tk_end, };
struct rule rule4 = {.lhs = NT_Function, .rhs = rhs4, .rhsLength = 6};
struct ruleRightSideElement tk_input = {false, true, .symbol.terminal = TK_INPUT};
struct ruleRightSideElement tk_parameter = {false, true, .symbol.terminal = TK_PARAMETER};
struct ruleRightSideElement tk_list = {false, true, .symbol.terminal = TK_LIST};
struct ruleRightSideElement tk_sql = {false, true, .symbol.terminal = TK_SQL};
struct ruleRightSideElement parameterList = {false, false, .symbol.nonTerminal = NT_ParameterList};
struct ruleRightSideElement tk_sqr = {false, true, .symbol.terminal = TK_SQR};
RuleRightSideElement rhs5[] = {&tk_input, &tk_parameter, &tk_list, &tk_sql, &parameterList, &tk_sqr, };
struct rule rule5 = {.lhs = NT_InputPar, .rhs = rhs5, .rhsLength = 6};
RuleRightSideElement rhs6[] = {&tk_input, &tk_parameter, &tk_list, &tk_sql, &parameterList, &tk_sqr, };
struct rule rule6 = {.lhs = NT_OutputPar, .rhs = rhs6, .rhsLength = 6};
RuleRightSideElement rhs7[] = {&eps, };
struct rule rule7 = {.lhs = NT_OutputPar, .rhs = rhs7, .rhsLength = 1};
struct ruleRightSideElement dataType = {false, false, .symbol.nonTerminal = NT_DataType};
struct ruleRightSideElement tk_id = {false, true, .symbol.terminal = TK_ID};
struct ruleRightSideElement remainingList = {false, false, .symbol.nonTerminal = NT_RemainingList};
RuleRightSideElement rhs8[] = {&dataType, &tk_id, &remainingList, };
struct rule rule8 = {.lhs = NT_ParameterList, .rhs = rhs8, .rhsLength = 3};
struct ruleRightSideElement primitiveDatatype = {false, false, .symbol.nonTerminal = NT_PrimitiveDatatype};
RuleRightSideElement rhs9[] = {&primitiveDatatype, };
struct rule rule9 = {.lhs = NT_DataType, .rhs = rhs9, .rhsLength = 1};
struct ruleRightSideElement constructedDatatype = {false, false, .symbol.nonTerminal = NT_ConstructedDatatype};
RuleRightSideElement rhs10[] = {&constructedDatatype, };
struct rule rule10 = {.lhs = NT_DataType, .rhs = rhs10, .rhsLength = 1};
struct ruleRightSideElement tk_int = {false, true, .symbol.terminal = TK_INT};
RuleRightSideElement rhs11[] = {&tk_int, };
struct rule rule11 = {.lhs = NT_PrimitiveDatatype, .rhs = rhs11, .rhsLength = 1};
struct ruleRightSideElement tk_real = {false, true, .symbol.terminal = TK_REAL};
RuleRightSideElement rhs12[] = {&tk_real, };
struct rule rule12 = {.lhs = NT_PrimitiveDatatype, .rhs = rhs12, .rhsLength = 1};
struct ruleRightSideElement tk_record = {false, true, .symbol.terminal = TK_RECORD};
struct ruleRightSideElement tk_ruid = {false, true, .symbol.terminal = TK_RUID};
RuleRightSideElement rhs13[] = {&tk_record, &tk_ruid, };
struct rule rule13 = {.lhs = NT_ConstructedDatatype, .rhs = rhs13, .rhsLength = 2};
struct ruleRightSideElement tk_union = {false, true, .symbol.terminal = TK_UNION};
RuleRightSideElement rhs14[] = {&tk_union, &tk_ruid, };
struct rule rule14 = {.lhs = NT_ConstructedDatatype, .rhs = rhs14, .rhsLength = 2};
RuleRightSideElement rhs15[] = {&tk_ruid, };
struct rule rule15 = {.lhs = NT_ConstructedDatatype, .rhs = rhs15, .rhsLength = 1};
struct ruleRightSideElement tk_comma = {false, true, .symbol.terminal = TK_COMMA};
RuleRightSideElement rhs16[] = {&tk_comma, &parameterList, };
struct rule rule16 = {.lhs = NT_RemainingList, .rhs = rhs16, .rhsLength = 2};
RuleRightSideElement rhs17[] = {&eps, };
struct rule rule17 = {.lhs = NT_RemainingList, .rhs = rhs17, .rhsLength = 1};
struct ruleRightSideElement typeDefinitions = {false, false, .symbol.nonTerminal = NT_TypeDefinitions};
struct ruleRightSideElement declaration = {false, false, .symbol.nonTerminal = NT_Declaration};
struct ruleRightSideElement otherStmts = {false, false, .symbol.nonTerminal = NT_OtherStmts};
struct ruleRightSideElement returnStmt = {false, false, .symbol.nonTerminal = NT_ReturnStmt};
RuleRightSideElement rhs18[] = {&typeDefinitions, &declaration, &otherStmts, &returnStmt, };
struct rule rule18 = {.lhs = NT_Stmts, .rhs = rhs18, .rhsLength = 4};
struct ruleRightSideElement actualOrRedefined = {false, false, .symbol.nonTerminal = NT_ActualOrRedefined};
RuleRightSideElement rhs19[] = {&actualOrRedefined, &typeDefinitions, };
struct rule rule19 = {.lhs = NT_TypeDefinitions, .rhs = rhs19, .rhsLength = 2};
RuleRightSideElement rhs20[] = {&eps, };
struct rule rule20 = {.lhs = NT_TypeDefinitions, .rhs = rhs20, .rhsLength = 1};
struct ruleRightSideElement typeDefinition = {false, false, .symbol.nonTerminal = NT_TypeDefinition};
RuleRightSideElement rhs21[] = {&typeDefinition, };
struct rule rule21 = {.lhs = NT_ActualOrRedefined, .rhs = rhs21, .rhsLength = 1};
struct ruleRightSideElement definetypeStmt = {false, false, .symbol.nonTerminal = NT_DefinetypeStmt};
RuleRightSideElement rhs22[] = {&definetypeStmt, };
struct rule rule22 = {.lhs = NT_ActualOrRedefined, .rhs = rhs22, .rhsLength = 1};
struct ruleRightSideElement fieldDefinitions = {false, false, .symbol.nonTerminal = NT_FieldDefinitions};
struct ruleRightSideElement tk_endrecord = {false, true, .symbol.terminal = TK_ENDRECORD};
RuleRightSideElement rhs23[] = {&tk_record, &tk_ruid, &fieldDefinitions, &tk_endrecord, };
struct rule rule23 = {.lhs = NT_TypeDefinition, .rhs = rhs23, .rhsLength = 4};
struct ruleRightSideElement tk_endunion = {false, true, .symbol.terminal = TK_ENDUNION};
RuleRightSideElement rhs24[] = {&tk_union, &tk_ruid, &fieldDefinitions, &tk_endunion, };
struct rule rule24 = {.lhs = NT_TypeDefinition, .rhs = rhs24, .rhsLength = 4};
struct ruleRightSideElement fieldDefinition = {false, false, .symbol.nonTerminal = NT_FieldDefinition};
struct ruleRightSideElement moreFields = {false, false, .symbol.nonTerminal = NT_MoreFields};
RuleRightSideElement rhs25[] = {&fieldDefinition, &fieldDefinition, &moreFields, };
struct rule rule25 = {.lhs = NT_FieldDefinitions, .rhs = rhs25, .rhsLength = 3};
struct ruleRightSideElement tk_type = {false, true, .symbol.terminal = TK_TYPE};
struct ruleRightSideElement tk_colon = {false, true, .symbol.terminal = TK_COLON};
struct ruleRightSideElement tk_fieldid = {false, true, .symbol.terminal = TK_FIELDID};
RuleRightSideElement rhs26[] = {&tk_type, &dataType, &tk_colon, &tk_fieldid, &tk_sem, };
struct rule rule26 = {.lhs = NT_FieldDefinition, .rhs = rhs26, .rhsLength = 5};
RuleRightSideElement rhs27[] = {&fieldDefinition, &moreFields, };
struct rule rule27 = {.lhs = NT_MoreFields, .rhs = rhs27, .rhsLength = 2};
RuleRightSideElement rhs28[] = {&eps, };
struct rule rule28 = {.lhs = NT_MoreFields, .rhs = rhs28, .rhsLength = 1};
struct ruleRightSideElement declarations = {false, false, .symbol.nonTerminal = NT_Declarations};
RuleRightSideElement rhs29[] = {&declaration, &declarations, };
struct rule rule29 = {.lhs = NT_Declarations, .rhs = rhs29, .rhsLength = 2};
RuleRightSideElement rhs30[] = {&eps, };
struct rule rule30 = {.lhs = NT_Declarations, .rhs = rhs30, .rhsLength = 1};
struct ruleRightSideElement globalOrNot = {false, false, .symbol.nonTerminal = NT_GlobalOrNot};
RuleRightSideElement rhs31[] = {&tk_type, &dataType, &tk_colon, &tk_id, &globalOrNot, &tk_sem, };
struct rule rule31 = {.lhs = NT_Declaration, .rhs = rhs31, .rhsLength = 6};
struct ruleRightSideElement tk_global = {false, true, .symbol.terminal = TK_GLOBAL};
RuleRightSideElement rhs32[] = {&tk_colon, &tk_global, };
struct rule rule32 = {.lhs = NT_GlobalOrNot, .rhs = rhs32, .rhsLength = 2};
RuleRightSideElement rhs33[] = {&eps, };
struct rule rule33 = {.lhs = NT_GlobalOrNot, .rhs = rhs33, .rhsLength = 1};
struct ruleRightSideElement stmt = {false, false, .symbol.nonTerminal = NT_Stmt};
RuleRightSideElement rhs34[] = {&stmt, &otherStmts, };
struct rule rule34 = {.lhs = NT_OtherStmts, .rhs = rhs34, .rhsLength = 2};
RuleRightSideElement rhs35[] = {&eps, };
struct rule rule35 = {.lhs = NT_OtherStmts, .rhs = rhs35, .rhsLength = 1};
struct ruleRightSideElement assignmentStmt = {false, false, .symbol.nonTerminal = NT_AssignmentStmt};
RuleRightSideElement rhs36[] = {&assignmentStmt, };
struct rule rule36 = {.lhs = NT_Stmt, .rhs = rhs36, .rhsLength = 1};
struct ruleRightSideElement iterativeStmt = {false, false, .symbol.nonTerminal = NT_IterativeStmt};
RuleRightSideElement rhs37[] = {&iterativeStmt, };
struct rule rule37 = {.lhs = NT_Stmt, .rhs = rhs37, .rhsLength = 1};
struct ruleRightSideElement conditionalStmt = {false, false, .symbol.nonTerminal = NT_ConditionalStmt};
RuleRightSideElement rhs38[] = {&conditionalStmt, };
struct rule rule38 = {.lhs = NT_Stmt, .rhs = rhs38, .rhsLength = 1};
struct ruleRightSideElement ioStmt = {false, false, .symbol.nonTerminal = NT_IoStmt};
RuleRightSideElement rhs39[] = {&ioStmt, };
struct rule rule39 = {.lhs = NT_Stmt, .rhs = rhs39, .rhsLength = 1};
struct ruleRightSideElement funCallStmt = {false, false, .symbol.nonTerminal = NT_FunCallStmt};
RuleRightSideElement rhs40[] = {&funCallStmt, };
struct rule rule40 = {.lhs = NT_Stmt, .rhs = rhs40, .rhsLength = 1};
struct ruleRightSideElement singleOrRecId = {false, false, .symbol.nonTerminal = NT_SingleOrRecId};
struct ruleRightSideElement tk_assignop = {false, true, .symbol.terminal = TK_ASSIGNOP};
struct ruleRightSideElement arithmeticExpression = {false, false, .symbol.nonTerminal = NT_ArithmeticExpression};
RuleRightSideElement rhs41[] = {&singleOrRecId, &tk_assignop, &arithmeticExpression, &tk_sem, };
struct rule rule41 = {.lhs = NT_AssignmentStmt, .rhs = rhs41, .rhsLength = 4};
struct ruleRightSideElement optionSingleConstructed = {false, false, .symbol.nonTerminal = NT_OptionSingleConstructed};
RuleRightSideElement rhs42[] = {&tk_id, &optionSingleConstructed, };
struct rule rule42 = {.lhs = NT_SingleOrRecId, .rhs = rhs42, .rhsLength = 2};
RuleRightSideElement rhs43[] = {&eps, };
struct rule rule43 = {.lhs = NT_OptionSingleConstructed, .rhs = rhs43, .rhsLength = 1};
struct ruleRightSideElement oneExpansion = {false, false, .symbol.nonTerminal = NT_OneExpansion};
struct ruleRightSideElement moreExpansions = {false, false, .symbol.nonTerminal = NT_MoreExpansions};
RuleRightSideElement rhs44[] = {&oneExpansion, &moreExpansions, };
struct rule rule44 = {.lhs = NT_OptionSingleConstructed, .rhs = rhs44, .rhsLength = 2};
struct ruleRightSideElement tk_dot = {false, true, .symbol.terminal = TK_DOT};
RuleRightSideElement rhs45[] = {&tk_dot, &tk_fieldid, };
struct rule rule45 = {.lhs = NT_OneExpansion, .rhs = rhs45, .rhsLength = 2};
RuleRightSideElement rhs46[] = {&oneExpansion, &moreExpansions, };
struct rule rule46 = {.lhs = NT_MoreExpansions, .rhs = rhs46, .rhsLength = 2};
RuleRightSideElement rhs47[] = {&eps, };
struct rule rule47 = {.lhs = NT_MoreExpansions, .rhs = rhs47, .rhsLength = 1};
struct ruleRightSideElement outputParameters = {false, false, .symbol.nonTerminal = NT_OutputParameters};
struct ruleRightSideElement tk_call = {false, true, .symbol.terminal = TK_CALL};
struct ruleRightSideElement tk_with = {false, true, .symbol.terminal = TK_WITH};
struct ruleRightSideElement tk_parameters = {false, true, .symbol.terminal = TK_PARAMETERS};
struct ruleRightSideElement inputParameters = {false, false, .symbol.nonTerminal = NT_InputParameters};
RuleRightSideElement rhs48[] = {&outputParameters, &tk_call, &tk_funid, &tk_with, &tk_parameters, &inputParameters, &tk_sem, };
struct rule rule48 = {.lhs = NT_FunCallStmt, .rhs = rhs48, .rhsLength = 7};
struct ruleRightSideElement idList = {false, false, .symbol.nonTerminal = NT_IdList};
RuleRightSideElement rhs49[] = {&tk_sql, &idList, &tk_sqr, &tk_assignop, };
struct rule rule49 = {.lhs = NT_OutputParameters, .rhs = rhs49, .rhsLength = 4};
RuleRightSideElement rhs50[] = {&eps, };
struct rule rule50 = {.lhs = NT_OutputParameters, .rhs = rhs50, .rhsLength = 1};
RuleRightSideElement rhs51[] = {&tk_sql, &idList, &tk_sqr, };
struct rule rule51 = {.lhs = NT_InputParameters, .rhs = rhs51, .rhsLength = 3};
struct ruleRightSideElement tk_while = {false, true, .symbol.terminal = TK_WHILE};
struct ruleRightSideElement tk_op = {false, true, .symbol.terminal = TK_OP};
struct ruleRightSideElement booleanExpression = {false, false, .symbol.nonTerminal = NT_BooleanExpression};
struct ruleRightSideElement tk_cl = {false, true, .symbol.terminal = TK_CL};
struct ruleRightSideElement tk_endwhile = {false, true, .symbol.terminal = TK_ENDWHILE};
RuleRightSideElement rhs52[] = {&tk_while, &tk_op, &booleanExpression, &tk_cl, &stmt, &otherStmts, &tk_endwhile, };
struct rule rule52 = {.lhs = NT_IterativeStmt, .rhs = rhs52, .rhsLength = 7};
struct ruleRightSideElement tk_if = {false, true, .symbol.terminal = TK_IF};
struct ruleRightSideElement tk_then = {false, true, .symbol.terminal = TK_THEN};
struct ruleRightSideElement elsePart = {false, false, .symbol.nonTerminal = NT_ElsePart};
struct ruleRightSideElement tk_endif = {false, true, .symbol.terminal = TK_ENDIF};
RuleRightSideElement rhs53[] = {&tk_if, &tk_op, &booleanExpression, &tk_cl, &tk_then, &stmt, &otherStmts, &elsePart, &tk_endif, };
struct rule rule53 = {.lhs = NT_ConditionalStmt, .rhs = rhs53, .rhsLength = 9};
struct ruleRightSideElement tk_else = {false, true, .symbol.terminal = TK_ELSE};
RuleRightSideElement rhs54[] = {&tk_else, &stmt, &otherStmts, };
struct rule rule54 = {.lhs = NT_ElsePart, .rhs = rhs54, .rhsLength = 3};
RuleRightSideElement rhs55[] = {&eps, };
struct rule rule55 = {.lhs = NT_ElsePart, .rhs = rhs55, .rhsLength = 1};
struct ruleRightSideElement tk_read = {false, true, .symbol.terminal = TK_READ};
struct ruleRightSideElement var = {false, false, .symbol.nonTerminal = NT_Var};
RuleRightSideElement rhs56[] = {&tk_read, &tk_op, &var, &tk_cl, &tk_sem, };
struct rule rule56 = {.lhs = NT_IoStmt, .rhs = rhs56, .rhsLength = 5};
struct ruleRightSideElement tk_write = {false, true, .symbol.terminal = TK_WRITE};
RuleRightSideElement rhs57[] = {&tk_write, &tk_op, &var, &tk_cl, &tk_sem, };
struct rule rule57 = {.lhs = NT_IoStmt, .rhs = rhs57, .rhsLength = 5};
struct ruleRightSideElement term = {false, false, .symbol.nonTerminal = NT_Term};
struct ruleRightSideElement moreTerms = {false, false, .symbol.nonTerminal = NT_MoreTerms};
RuleRightSideElement rhs58[] = {&term, &moreTerms, };
struct rule rule58 = {.lhs = NT_ArithmeticExpression, .rhs = rhs58, .rhsLength = 2};
RuleRightSideElement rhs59[] = {&tk_op, &arithmeticExpression, &tk_cl, };
struct rule rule59 = {.lhs = NT_ArithmeticExpression, .rhs = rhs59, .rhsLength = 3};
RuleRightSideElement rhs60[] = {&var, };
struct rule rule60 = {.lhs = NT_ArithmeticExpression, .rhs = rhs60, .rhsLength = 1};
struct ruleRightSideElement lowPrecedenceOperator = {false, false, .symbol.nonTerminal = NT_LowPrecedenceOperator};
RuleRightSideElement rhs61[] = {&lowPrecedenceOperator, &term, &moreTerms, };
struct rule rule61 = {.lhs = NT_MoreTerms, .rhs = rhs61, .rhsLength = 3};
RuleRightSideElement rhs62[] = {&eps, };
struct rule rule62 = {.lhs = NT_MoreTerms, .rhs = rhs62, .rhsLength = 1};
struct ruleRightSideElement factor = {false, false, .symbol.nonTerminal = NT_Factor};
struct ruleRightSideElement moreFactors = {false, false, .symbol.nonTerminal = NT_MoreFactors};
RuleRightSideElement rhs63[] = {&factor, &moreFactors, };
struct rule rule63 = {.lhs = NT_Term, .rhs = rhs63, .rhsLength = 2};
struct ruleRightSideElement highPrecedenceOperator = {false, false, .symbol.nonTerminal = NT_HighPrecedenceOperator};
RuleRightSideElement rhs64[] = {&highPrecedenceOperator, &factor, &moreFactors, };
struct rule rule64 = {.lhs = NT_MoreFactors, .rhs = rhs64, .rhsLength = 3};
RuleRightSideElement rhs65[] = {&eps, };
struct rule rule65 = {.lhs = NT_MoreFactors, .rhs = rhs65, .rhsLength = 1};
RuleRightSideElement rhs66[] = {&tk_op, &arithmeticExpression, &tk_cl, };
struct rule rule66 = {.lhs = NT_Factor, .rhs = rhs66, .rhsLength = 3};
RuleRightSideElement rhs67[] = {&var, };
struct rule rule67 = {.lhs = NT_Factor, .rhs = rhs67, .rhsLength = 1};
struct ruleRightSideElement tk_mul = {false, true, .symbol.terminal = TK_MUL};
RuleRightSideElement rhs68[] = {&tk_mul, };
struct rule rule68 = {.lhs = NT_HighPrecedenceOperator, .rhs = rhs68, .rhsLength = 1};
struct ruleRightSideElement tk_div = {false, true, .symbol.terminal = TK_DIV};
RuleRightSideElement rhs69[] = {&tk_div, };
struct rule rule69 = {.lhs = NT_HighPrecedenceOperator, .rhs = rhs69, .rhsLength = 1};
struct ruleRightSideElement tk_plus = {false, true, .symbol.terminal = TK_PLUS};
RuleRightSideElement rhs70[] = {&tk_plus, };
struct rule rule70 = {.lhs = NT_LowPrecedenceOperator, .rhs = rhs70, .rhsLength = 1};
struct ruleRightSideElement tk_minus = {false, true, .symbol.terminal = TK_MINUS};
RuleRightSideElement rhs71[] = {&tk_minus, };
struct rule rule71 = {.lhs = NT_LowPrecedenceOperator, .rhs = rhs71, .rhsLength = 1};
struct ruleRightSideElement logicalOp = {false, false, .symbol.nonTerminal = NT_LogicalOp};
RuleRightSideElement rhs72[] = {&tk_op, &booleanExpression, &tk_cl, &logicalOp, &tk_op, &booleanExpression, &tk_cl, };
struct rule rule72 = {.lhs = NT_BooleanExpression, .rhs = rhs72, .rhsLength = 7};
struct ruleRightSideElement relationalOp = {false, false, .symbol.nonTerminal = NT_RelationalOp};
RuleRightSideElement rhs73[] = {&var, &relationalOp, &var, };
struct rule rule73 = {.lhs = NT_BooleanExpression, .rhs = rhs73, .rhsLength = 3};
struct ruleRightSideElement tk_not = {false, true, .symbol.terminal = TK_NOT};
RuleRightSideElement rhs74[] = {&tk_not, &tk_op, &booleanExpression, &tk_cl, };
struct rule rule74 = {.lhs = NT_BooleanExpression, .rhs = rhs74, .rhsLength = 4};
struct ruleRightSideElement tk_num = {false, true, .symbol.terminal = TK_NUM};
RuleRightSideElement rhs75[] = {&tk_num, };
struct rule rule75 = {.lhs = NT_Var, .rhs = rhs75, .rhsLength = 1};
struct ruleRightSideElement tk_rnum = {false, true, .symbol.terminal = TK_RNUM};
RuleRightSideElement rhs76[] = {&tk_rnum, };
struct rule rule76 = {.lhs = NT_Var, .rhs = rhs76, .rhsLength = 1};
RuleRightSideElement rhs77[] = {&singleOrRecId, };
struct rule rule77 = {.lhs = NT_Var, .rhs = rhs77, .rhsLength = 1};
struct ruleRightSideElement tk_and = {false, true, .symbol.terminal = TK_AND};
RuleRightSideElement rhs78[] = {&tk_and, };
struct rule rule78 = {.lhs = NT_LogicalOp, .rhs = rhs78, .rhsLength = 1};
struct ruleRightSideElement tk_or = {false, true, .symbol.terminal = TK_OR};
RuleRightSideElement rhs79[] = {&tk_or, };
struct rule rule79 = {.lhs = NT_LogicalOp, .rhs = rhs79, .rhsLength = 1};
struct ruleRightSideElement tk_lt = {false, true, .symbol.terminal = TK_LT};
RuleRightSideElement rhs80[] = {&tk_lt, };
struct rule rule80 = {.lhs = NT_RelationalOp, .rhs = rhs80, .rhsLength = 1};
struct ruleRightSideElement tk_le = {false, true, .symbol.terminal = TK_LE};
RuleRightSideElement rhs81[] = {&tk_le, };
struct rule rule81 = {.lhs = NT_RelationalOp, .rhs = rhs81, .rhsLength = 1};
struct ruleRightSideElement tk_eq = {false, true, .symbol.terminal = TK_EQ};
RuleRightSideElement rhs82[] = {&tk_eq, };
struct rule rule82 = {.lhs = NT_RelationalOp, .rhs = rhs82, .rhsLength = 1};
struct ruleRightSideElement tk_gt = {false, true, .symbol.terminal = TK_GT};
RuleRightSideElement rhs83[] = {&tk_gt, };
struct rule rule83 = {.lhs = NT_RelationalOp, .rhs = rhs83, .rhsLength = 1};
struct ruleRightSideElement tk_ge = {false, true, .symbol.terminal = TK_GE};
RuleRightSideElement rhs84[] = {&tk_ge, };
struct rule rule84 = {.lhs = NT_RelationalOp, .rhs = rhs84, .rhsLength = 1};
struct ruleRightSideElement tk_ne = {false, true, .symbol.terminal = TK_NE};
RuleRightSideElement rhs85[] = {&tk_ne, };
struct rule rule85 = {.lhs = NT_RelationalOp, .rhs = rhs85, .rhsLength = 1};
struct ruleRightSideElement tk_return = {false, true, .symbol.terminal = TK_RETURN};
struct ruleRightSideElement optionalReturn = {false, false, .symbol.nonTerminal = NT_OptionalReturn};
RuleRightSideElement rhs86[] = {&tk_return, &optionalReturn, &tk_sem, };
struct rule rule86 = {.lhs = NT_ReturnStmt, .rhs = rhs86, .rhsLength = 3};
RuleRightSideElement rhs87[] = {&tk_sql, &idList, &tk_sqr, };
struct rule rule87 = {.lhs = NT_OptionalReturn, .rhs = rhs87, .rhsLength = 3};
RuleRightSideElement rhs88[] = {&eps, };
struct rule rule88 = {.lhs = NT_OptionalReturn, .rhs = rhs88, .rhsLength = 1};
struct ruleRightSideElement moreIds = {false, false, .symbol.nonTerminal = NT_MoreIds};
RuleRightSideElement rhs89[] = {&tk_id, &moreIds, };
struct rule rule89 = {.lhs = NT_IdList, .rhs = rhs89, .rhsLength = 2};
RuleRightSideElement rhs90[] = {&tk_comma, &idList, };
struct rule rule90 = {.lhs = NT_MoreIds, .rhs = rhs90, .rhsLength = 2};
RuleRightSideElement rhs91[] = {&eps, };
struct rule rule91 = {.lhs = NT_MoreIds, .rhs = rhs91, .rhsLength = 1};
struct ruleRightSideElement tk_definetype = {false, true, .symbol.terminal = TK_DEFINETYPE};
struct ruleRightSideElement A = {false, false, .symbol.nonTerminal = NT_A};
struct ruleRightSideElement tk_as = {false, true, .symbol.terminal = TK_AS};
RuleRightSideElement rhs92[] = {&tk_definetype, &A, &tk_ruid, &tk_as, &tk_ruid, };
struct rule rule92 = {.lhs = NT_DefinetypeStmt, .rhs = rhs92, .rhsLength = 5};
RuleRightSideElement rhs93[] = {&tk_record, };
struct rule rule93 = {.lhs = NT_A, .rhs = rhs93, .rhsLength = 1};
RuleRightSideElement rhs94[] = {&tk_union, };
struct rule rule94 = {.lhs = NT_A, .rhs = rhs94, .rhsLength = 1};

Rule rules[] = {&rule0, &rule1, &rule2, &rule3, &rule4, &rule5, &rule6, &rule7, &rule8, &rule9, &rule10, &rule11, &rule12, &rule13, &rule14, &rule15, &rule16, &rule17, &rule18, &rule19, &rule20, &rule21, &rule22, &rule23, &rule24, &rule25, &rule26, &rule27, &rule28, &rule29, &rule30, &rule31, &rule32, &rule33, &rule34, &rule35, &rule36, &rule37, &rule38, &rule39, &rule40, &rule41, &rule42, &rule43, &rule44, &rule45, &rule46, &rule47, &rule48, &rule49, &rule50, &rule51, &rule52, &rule53, &rule54, &rule55, &rule56, &rule57, &rule58, &rule59, &rule60, &rule61, &rule62, &rule63, &rule64, &rule65, &rule66, &rule67, &rule68, &rule69, &rule70, &rule71, &rule72, &rule73, &rule74, &rule75, &rule76, &rule77, &rule78, &rule79, &rule80, &rule81, &rule82, &rule83, &rule84, &rule85, &rule86, &rule87, &rule88, &rule89, &rule90, &rule91, &rule92, &rule93, &rule94, };
struct grammar languageGrammar = {NT_Program, 95, rules};
#define NUM_NON_TERMINALS 107
#define NUM_RULES 95
#endif
