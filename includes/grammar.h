#ifndef GRAMMAR_H
#define GRAMMAR_H
#include "parserDef.h"
struct ruleRightSideElement _otherFunctions = {false, .symbol.nonTerminal = NT_OTHERFUNCTIONS};
struct ruleRightSideElement _mainFunction = {false, .symbol.nonTerminal = NT_MAINFUNCTION};
RuleRightSideElement _rhs0[] = {&_otherFunctions, &_mainFunction, };
struct rule _rule0 = {.lhs = NT_PROGRAM, .rhs = _rhs0, .isEpsilon = false, .rhsLength = 2};
struct ruleRightSideElement _tk_main = {true, .symbol.terminal = TK_MAIN};
struct ruleRightSideElement _stmts = {false, .symbol.nonTerminal = NT_STMTS};
struct ruleRightSideElement _tk_end = {true, .symbol.terminal = TK_END};
RuleRightSideElement _rhs1[] = {&_tk_main, &_stmts, &_tk_end, };
struct rule _rule1 = {.lhs = NT_MAINFUNCTION, .rhs = _rhs1, .isEpsilon = false, .rhsLength = 3};
struct ruleRightSideElement _function = {false, .symbol.nonTerminal = NT_FUNCTION};
RuleRightSideElement _rhs2[] = {&_function, &_otherFunctions, };
struct rule _rule2 = {.lhs = NT_OTHERFUNCTIONS, .rhs = _rhs2, .isEpsilon = false, .rhsLength = 2};
struct rule _rule3 = {.lhs = NT_OTHERFUNCTIONS, .isEpsilon = true};
struct ruleRightSideElement _tk_funid = {true, .symbol.terminal = TK_FUNID};
struct ruleRightSideElement _inputPar = {false, .symbol.nonTerminal = NT_INPUTPAR};
struct ruleRightSideElement _outputPar = {false, .symbol.nonTerminal = NT_OUTPUTPAR};
struct ruleRightSideElement _tk_sem = {true, .symbol.terminal = TK_SEM};
RuleRightSideElement _rhs4[] = {&_tk_funid, &_inputPar, &_outputPar, &_tk_sem, &_stmts, &_tk_end, };
struct rule _rule4 = {.lhs = NT_FUNCTION, .rhs = _rhs4, .isEpsilon = false, .rhsLength = 6};
struct ruleRightSideElement _tk_input = {true, .symbol.terminal = TK_INPUT};
struct ruleRightSideElement _tk_parameter = {true, .symbol.terminal = TK_PARAMETER};
struct ruleRightSideElement _tk_list = {true, .symbol.terminal = TK_LIST};
struct ruleRightSideElement _tk_sql = {true, .symbol.terminal = TK_SQL};
struct ruleRightSideElement _parameterList = {false, .symbol.nonTerminal = NT_PARAMETERLIST};
struct ruleRightSideElement _tk_sqr = {true, .symbol.terminal = TK_SQR};
RuleRightSideElement _rhs5[] = {&_tk_input, &_tk_parameter, &_tk_list, &_tk_sql, &_parameterList, &_tk_sqr, };
struct rule _rule5 = {.lhs = NT_INPUTPAR, .rhs = _rhs5, .isEpsilon = false, .rhsLength = 6};
RuleRightSideElement _rhs6[] = {&_tk_input, &_tk_parameter, &_tk_list, &_tk_sql, &_parameterList, &_tk_sqr, };
struct rule _rule6 = {.lhs = NT_OUTPUTPAR, .rhs = _rhs6, .isEpsilon = false, .rhsLength = 6};
struct rule _rule7 = {.lhs = NT_OUTPUTPAR, .isEpsilon = true};
struct ruleRightSideElement _dataType = {false, .symbol.nonTerminal = NT_DATATYPE};
struct ruleRightSideElement _tk_id = {true, .symbol.terminal = TK_ID};
struct ruleRightSideElement _remainingList = {false, .symbol.nonTerminal = NT_REMAININGLIST};
RuleRightSideElement _rhs8[] = {&_dataType, &_tk_id, &_remainingList, };
struct rule _rule8 = {.lhs = NT_PARAMETERLIST, .rhs = _rhs8, .isEpsilon = false, .rhsLength = 3};
struct ruleRightSideElement _primitiveDatatype = {false, .symbol.nonTerminal = NT_PRIMITIVEDATATYPE};
RuleRightSideElement _rhs9[] = {&_primitiveDatatype, };
struct rule _rule9 = {.lhs = NT_DATATYPE, .rhs = _rhs9, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _constructedDatatype = {false, .symbol.nonTerminal = NT_CONSTRUCTEDDATATYPE};
RuleRightSideElement _rhs10[] = {&_constructedDatatype, };
struct rule _rule10 = {.lhs = NT_DATATYPE, .rhs = _rhs10, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_int = {true, .symbol.terminal = TK_INT};
RuleRightSideElement _rhs11[] = {&_tk_int, };
struct rule _rule11 = {.lhs = NT_PRIMITIVEDATATYPE, .rhs = _rhs11, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_real = {true, .symbol.terminal = TK_REAL};
RuleRightSideElement _rhs12[] = {&_tk_real, };
struct rule _rule12 = {.lhs = NT_PRIMITIVEDATATYPE, .rhs = _rhs12, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_record = {true, .symbol.terminal = TK_RECORD};
struct ruleRightSideElement _tk_ruid = {true, .symbol.terminal = TK_RUID};
RuleRightSideElement _rhs13[] = {&_tk_record, &_tk_ruid, };
struct rule _rule13 = {.lhs = NT_CONSTRUCTEDDATATYPE, .rhs = _rhs13, .isEpsilon = false, .rhsLength = 2};
struct ruleRightSideElement _tk_union = {true, .symbol.terminal = TK_UNION};
RuleRightSideElement _rhs14[] = {&_tk_union, &_tk_ruid, };
struct rule _rule14 = {.lhs = NT_CONSTRUCTEDDATATYPE, .rhs = _rhs14, .isEpsilon = false, .rhsLength = 2};
RuleRightSideElement _rhs15[] = {&_tk_ruid, };
struct rule _rule15 = {.lhs = NT_CONSTRUCTEDDATATYPE, .rhs = _rhs15, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_comma = {true, .symbol.terminal = TK_COMMA};
RuleRightSideElement _rhs16[] = {&_tk_comma, &_parameterList, };
struct rule _rule16 = {.lhs = NT_REMAININGLIST, .rhs = _rhs16, .isEpsilon = false, .rhsLength = 2};
struct rule _rule17 = {.lhs = NT_REMAININGLIST, .isEpsilon = true};
struct ruleRightSideElement _typeDefinitions = {false, .symbol.nonTerminal = NT_TYPEDEFINITIONS};
struct ruleRightSideElement _declarations = {false, .symbol.nonTerminal = NT_DECLARATIONS};
struct ruleRightSideElement _otherStmts = {false, .symbol.nonTerminal = NT_OTHERSTMTS};
struct ruleRightSideElement _returnStmt = {false, .symbol.nonTerminal = NT_RETURNSTMT};
RuleRightSideElement _rhs18[] = {&_typeDefinitions, &_declarations, &_otherStmts, &_returnStmt, };
struct rule _rule18 = {.lhs = NT_STMTS, .rhs = _rhs18, .isEpsilon = false, .rhsLength = 4};
struct ruleRightSideElement _actualOrRedefined = {false, .symbol.nonTerminal = NT_ACTUALORREDEFINED};
RuleRightSideElement _rhs19[] = {&_actualOrRedefined, &_typeDefinitions, };
struct rule _rule19 = {.lhs = NT_TYPEDEFINITIONS, .rhs = _rhs19, .isEpsilon = false, .rhsLength = 2};
struct rule _rule20 = {.lhs = NT_TYPEDEFINITIONS, .isEpsilon = true};
struct ruleRightSideElement _typeDefinition = {false, .symbol.nonTerminal = NT_TYPEDEFINITION};
RuleRightSideElement _rhs21[] = {&_typeDefinition, };
struct rule _rule21 = {.lhs = NT_ACTUALORREDEFINED, .rhs = _rhs21, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _definetypeStmt = {false, .symbol.nonTerminal = NT_DEFINETYPESTMT};
RuleRightSideElement _rhs22[] = {&_definetypeStmt, };
struct rule _rule22 = {.lhs = NT_ACTUALORREDEFINED, .rhs = _rhs22, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _fieldDefinitions = {false, .symbol.nonTerminal = NT_FIELDDEFINITIONS};
struct ruleRightSideElement _tk_endrecord = {true, .symbol.terminal = TK_ENDRECORD};
RuleRightSideElement _rhs23[] = {&_tk_record, &_tk_ruid, &_fieldDefinitions, &_tk_endrecord, };
struct rule _rule23 = {.lhs = NT_TYPEDEFINITION, .rhs = _rhs23, .isEpsilon = false, .rhsLength = 4};
struct ruleRightSideElement _tk_endunion = {true, .symbol.terminal = TK_ENDUNION};
RuleRightSideElement _rhs24[] = {&_tk_union, &_tk_ruid, &_fieldDefinitions, &_tk_endunion, };
struct rule _rule24 = {.lhs = NT_TYPEDEFINITION, .rhs = _rhs24, .isEpsilon = false, .rhsLength = 4};
struct ruleRightSideElement _fieldDefinition = {false, .symbol.nonTerminal = NT_FIELDDEFINITION};
struct ruleRightSideElement _moreFields = {false, .symbol.nonTerminal = NT_MOREFIELDS};
RuleRightSideElement _rhs25[] = {&_fieldDefinition, &_fieldDefinition, &_moreFields, };
struct rule _rule25 = {.lhs = NT_FIELDDEFINITIONS, .rhs = _rhs25, .isEpsilon = false, .rhsLength = 3};
struct ruleRightSideElement _tk_type = {true, .symbol.terminal = TK_TYPE};
struct ruleRightSideElement _tk_colon = {true, .symbol.terminal = TK_COLON};
struct ruleRightSideElement _tk_fieldid = {true, .symbol.terminal = TK_FIELDID};
RuleRightSideElement _rhs26[] = {&_tk_type, &_dataType, &_tk_colon, &_tk_fieldid, &_tk_sem, };
struct rule _rule26 = {.lhs = NT_FIELDDEFINITION, .rhs = _rhs26, .isEpsilon = false, .rhsLength = 5};
RuleRightSideElement _rhs27[] = {&_fieldDefinition, &_moreFields, };
struct rule _rule27 = {.lhs = NT_MOREFIELDS, .rhs = _rhs27, .isEpsilon = false, .rhsLength = 2};
struct rule _rule28 = {.lhs = NT_MOREFIELDS, .isEpsilon = true};
struct ruleRightSideElement _declaration = {false, .symbol.nonTerminal = NT_DECLARATION};
RuleRightSideElement _rhs29[] = {&_declaration, &_declarations, };
struct rule _rule29 = {.lhs = NT_DECLARATIONS, .rhs = _rhs29, .isEpsilon = false, .rhsLength = 2};
struct rule _rule30 = {.lhs = NT_DECLARATIONS, .isEpsilon = true};
struct ruleRightSideElement _globalOrNot = {false, .symbol.nonTerminal = NT_GLOBALORNOT};
RuleRightSideElement _rhs31[] = {&_tk_type, &_dataType, &_tk_colon, &_tk_id, &_globalOrNot, &_tk_sem, };
struct rule _rule31 = {.lhs = NT_DECLARATION, .rhs = _rhs31, .isEpsilon = false, .rhsLength = 6};
struct ruleRightSideElement _tk_global = {true, .symbol.terminal = TK_GLOBAL};
RuleRightSideElement _rhs32[] = {&_tk_colon, &_tk_global, };
struct rule _rule32 = {.lhs = NT_GLOBALORNOT, .rhs = _rhs32, .isEpsilon = false, .rhsLength = 2};
struct rule _rule33 = {.lhs = NT_GLOBALORNOT, .isEpsilon = true};
struct ruleRightSideElement _stmt = {false, .symbol.nonTerminal = NT_STMT};
RuleRightSideElement _rhs34[] = {&_stmt, &_otherStmts, };
struct rule _rule34 = {.lhs = NT_OTHERSTMTS, .rhs = _rhs34, .isEpsilon = false, .rhsLength = 2};
struct rule _rule35 = {.lhs = NT_OTHERSTMTS, .isEpsilon = true};
struct ruleRightSideElement _assignmentStmt = {false, .symbol.nonTerminal = NT_ASSIGNMENTSTMT};
RuleRightSideElement _rhs36[] = {&_assignmentStmt, };
struct rule _rule36 = {.lhs = NT_STMT, .rhs = _rhs36, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _iterativeStmt = {false, .symbol.nonTerminal = NT_ITERATIVESTMT};
RuleRightSideElement _rhs37[] = {&_iterativeStmt, };
struct rule _rule37 = {.lhs = NT_STMT, .rhs = _rhs37, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _conditionalStmt = {false, .symbol.nonTerminal = NT_CONDITIONALSTMT};
RuleRightSideElement _rhs38[] = {&_conditionalStmt, };
struct rule _rule38 = {.lhs = NT_STMT, .rhs = _rhs38, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _ioStmt = {false, .symbol.nonTerminal = NT_IOSTMT};
RuleRightSideElement _rhs39[] = {&_ioStmt, };
struct rule _rule39 = {.lhs = NT_STMT, .rhs = _rhs39, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _funCallStmt = {false, .symbol.nonTerminal = NT_FUNCALLSTMT};
RuleRightSideElement _rhs40[] = {&_funCallStmt, };
struct rule _rule40 = {.lhs = NT_STMT, .rhs = _rhs40, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _singleOrRecId = {false, .symbol.nonTerminal = NT_SINGLEORRECID};
struct ruleRightSideElement _tk_assignop = {true, .symbol.terminal = TK_ASSIGNOP};
struct ruleRightSideElement _arithmeticExpression = {false, .symbol.nonTerminal = NT_ARITHMETICEXPRESSION};
RuleRightSideElement _rhs41[] = {&_singleOrRecId, &_tk_assignop, &_arithmeticExpression, &_tk_sem, };
struct rule _rule41 = {.lhs = NT_ASSIGNMENTSTMT, .rhs = _rhs41, .isEpsilon = false, .rhsLength = 4};
struct ruleRightSideElement _optionSingleConstructed = {false, .symbol.nonTerminal = NT_OPTIONSINGLECONSTRUCTED};
RuleRightSideElement _rhs42[] = {&_tk_id, &_optionSingleConstructed, };
struct rule _rule42 = {.lhs = NT_SINGLEORRECID, .rhs = _rhs42, .isEpsilon = false, .rhsLength = 2};
struct rule _rule43 = {.lhs = NT_OPTIONSINGLECONSTRUCTED, .isEpsilon = true};
struct ruleRightSideElement _oneExpansion = {false, .symbol.nonTerminal = NT_ONEEXPANSION};
struct ruleRightSideElement _moreExpansions = {false, .symbol.nonTerminal = NT_MOREEXPANSIONS};
RuleRightSideElement _rhs44[] = {&_oneExpansion, &_moreExpansions, };
struct rule _rule44 = {.lhs = NT_OPTIONSINGLECONSTRUCTED, .rhs = _rhs44, .isEpsilon = false, .rhsLength = 2};
struct ruleRightSideElement _tk_dot = {true, .symbol.terminal = TK_DOT};
RuleRightSideElement _rhs45[] = {&_tk_dot, &_tk_fieldid, };
struct rule _rule45 = {.lhs = NT_ONEEXPANSION, .rhs = _rhs45, .isEpsilon = false, .rhsLength = 2};
RuleRightSideElement _rhs46[] = {&_oneExpansion, &_moreExpansions, };
struct rule _rule46 = {.lhs = NT_MOREEXPANSIONS, .rhs = _rhs46, .isEpsilon = false, .rhsLength = 2};
struct rule _rule47 = {.lhs = NT_MOREEXPANSIONS, .isEpsilon = true};
struct ruleRightSideElement _outputParameters = {false, .symbol.nonTerminal = NT_OUTPUTPARAMETERS};
struct ruleRightSideElement _tk_call = {true, .symbol.terminal = TK_CALL};
struct ruleRightSideElement _tk_with = {true, .symbol.terminal = TK_WITH};
struct ruleRightSideElement _tk_parameters = {true, .symbol.terminal = TK_PARAMETERS};
struct ruleRightSideElement _inputParameters = {false, .symbol.nonTerminal = NT_INPUTPARAMETERS};
RuleRightSideElement _rhs48[] = {&_outputParameters, &_tk_call, &_tk_funid, &_tk_with, &_tk_parameters, &_inputParameters, &_tk_sem, };
struct rule _rule48 = {.lhs = NT_FUNCALLSTMT, .rhs = _rhs48, .isEpsilon = false, .rhsLength = 7};
struct ruleRightSideElement _idList = {false, .symbol.nonTerminal = NT_IDLIST};
RuleRightSideElement _rhs49[] = {&_tk_sql, &_idList, &_tk_sqr, &_tk_assignop, };
struct rule _rule49 = {.lhs = NT_OUTPUTPARAMETERS, .rhs = _rhs49, .isEpsilon = false, .rhsLength = 4};
struct rule _rule50 = {.lhs = NT_OUTPUTPARAMETERS, .isEpsilon = true};
RuleRightSideElement _rhs51[] = {&_tk_sql, &_idList, &_tk_sqr, };
struct rule _rule51 = {.lhs = NT_INPUTPARAMETERS, .rhs = _rhs51, .isEpsilon = false, .rhsLength = 3};
struct ruleRightSideElement _tk_while = {true, .symbol.terminal = TK_WHILE};
struct ruleRightSideElement _tk_op = {true, .symbol.terminal = TK_OP};
struct ruleRightSideElement _booleanExpression = {false, .symbol.nonTerminal = NT_BOOLEANEXPRESSION};
struct ruleRightSideElement _tk_cl = {true, .symbol.terminal = TK_CL};
struct ruleRightSideElement _tk_endwhile = {true, .symbol.terminal = TK_ENDWHILE};
RuleRightSideElement _rhs52[] = {&_tk_while, &_tk_op, &_booleanExpression, &_tk_cl, &_stmt, &_otherStmts, &_tk_endwhile, };
struct rule _rule52 = {.lhs = NT_ITERATIVESTMT, .rhs = _rhs52, .isEpsilon = false, .rhsLength = 7};
struct ruleRightSideElement _tk_if = {true, .symbol.terminal = TK_IF};
struct ruleRightSideElement _tk_then = {true, .symbol.terminal = TK_THEN};
struct ruleRightSideElement _elsePart = {false, .symbol.nonTerminal = NT_ELSEPART};
struct ruleRightSideElement _tk_endif = {true, .symbol.terminal = TK_ENDIF};
RuleRightSideElement _rhs53[] = {&_tk_if, &_tk_op, &_booleanExpression, &_tk_cl, &_tk_then, &_stmt, &_otherStmts, &_elsePart, &_tk_endif, };
struct rule _rule53 = {.lhs = NT_CONDITIONALSTMT, .rhs = _rhs53, .isEpsilon = false, .rhsLength = 9};
struct ruleRightSideElement _tk_else = {true, .symbol.terminal = TK_ELSE};
RuleRightSideElement _rhs54[] = {&_tk_else, &_stmt, &_otherStmts, };
struct rule _rule54 = {.lhs = NT_ELSEPART, .rhs = _rhs54, .isEpsilon = false, .rhsLength = 3};
struct rule _rule55 = {.lhs = NT_ELSEPART, .isEpsilon = true};
struct ruleRightSideElement _tk_read = {true, .symbol.terminal = TK_READ};
struct ruleRightSideElement _var = {false, .symbol.nonTerminal = NT_VAR};
RuleRightSideElement _rhs56[] = {&_tk_read, &_tk_op, &_var, &_tk_cl, &_tk_sem, };
struct rule _rule56 = {.lhs = NT_IOSTMT, .rhs = _rhs56, .isEpsilon = false, .rhsLength = 5};
struct ruleRightSideElement _tk_write = {true, .symbol.terminal = TK_WRITE};
RuleRightSideElement _rhs57[] = {&_tk_write, &_tk_op, &_var, &_tk_cl, &_tk_sem, };
struct rule _rule57 = {.lhs = NT_IOSTMT, .rhs = _rhs57, .isEpsilon = false, .rhsLength = 5};
struct ruleRightSideElement _term = {false, .symbol.nonTerminal = NT_TERM};
struct ruleRightSideElement _moreTerms = {false, .symbol.nonTerminal = NT_MORETERMS};
RuleRightSideElement _rhs58[] = {&_term, &_moreTerms, };
struct rule _rule58 = {.lhs = NT_ARITHMETICEXPRESSION, .rhs = _rhs58, .isEpsilon = false, .rhsLength = 2};
RuleRightSideElement _rhs59[] = {&_tk_op, &_arithmeticExpression, &_tk_cl, };
struct rule _rule59 = {.lhs = NT_ARITHMETICEXPRESSION, .rhs = _rhs59, .isEpsilon = false, .rhsLength = 3};
RuleRightSideElement _rhs60[] = {&_var, };
struct rule _rule60 = {.lhs = NT_ARITHMETICEXPRESSION, .rhs = _rhs60, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _lowPrecedenceOperator = {false, .symbol.nonTerminal = NT_LOWPRECEDENCEOPERATOR};
RuleRightSideElement _rhs61[] = {&_lowPrecedenceOperator, &_term, &_moreTerms, };
struct rule _rule61 = {.lhs = NT_MORETERMS, .rhs = _rhs61, .isEpsilon = false, .rhsLength = 3};
struct rule _rule62 = {.lhs = NT_MORETERMS, .isEpsilon = true};
struct ruleRightSideElement _factor = {false, .symbol.nonTerminal = NT_FACTOR};
struct ruleRightSideElement _moreFactors = {false, .symbol.nonTerminal = NT_MOREFACTORS};
RuleRightSideElement _rhs63[] = {&_factor, &_moreFactors, };
struct rule _rule63 = {.lhs = NT_TERM, .rhs = _rhs63, .isEpsilon = false, .rhsLength = 2};
struct ruleRightSideElement _highPrecedenceOperator = {false, .symbol.nonTerminal = NT_HIGHPRECEDENCEOPERATOR};
RuleRightSideElement _rhs64[] = {&_highPrecedenceOperator, &_factor, &_moreFactors, };
struct rule _rule64 = {.lhs = NT_MOREFACTORS, .rhs = _rhs64, .isEpsilon = false, .rhsLength = 3};
struct rule _rule65 = {.lhs = NT_MOREFACTORS, .isEpsilon = true};
RuleRightSideElement _rhs66[] = {&_tk_op, &_arithmeticExpression, &_tk_cl, };
struct rule _rule66 = {.lhs = NT_FACTOR, .rhs = _rhs66, .isEpsilon = false, .rhsLength = 3};
RuleRightSideElement _rhs67[] = {&_var, };
struct rule _rule67 = {.lhs = NT_FACTOR, .rhs = _rhs67, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_mul = {true, .symbol.terminal = TK_MUL};
RuleRightSideElement _rhs68[] = {&_tk_mul, };
struct rule _rule68 = {.lhs = NT_HIGHPRECEDENCEOPERATOR, .rhs = _rhs68, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_div = {true, .symbol.terminal = TK_DIV};
RuleRightSideElement _rhs69[] = {&_tk_div, };
struct rule _rule69 = {.lhs = NT_HIGHPRECEDENCEOPERATOR, .rhs = _rhs69, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_plus = {true, .symbol.terminal = TK_PLUS};
RuleRightSideElement _rhs70[] = {&_tk_plus, };
struct rule _rule70 = {.lhs = NT_LOWPRECEDENCEOPERATOR, .rhs = _rhs70, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_minus = {true, .symbol.terminal = TK_MINUS};
RuleRightSideElement _rhs71[] = {&_tk_minus, };
struct rule _rule71 = {.lhs = NT_LOWPRECEDENCEOPERATOR, .rhs = _rhs71, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _logicalOp = {false, .symbol.nonTerminal = NT_LOGICALOP};
RuleRightSideElement _rhs72[] = {&_tk_op, &_booleanExpression, &_tk_cl, &_logicalOp, &_tk_op, &_booleanExpression, &_tk_cl, };
struct rule _rule72 = {.lhs = NT_BOOLEANEXPRESSION, .rhs = _rhs72, .isEpsilon = false, .rhsLength = 7};
struct ruleRightSideElement _relationalOp = {false, .symbol.nonTerminal = NT_RELATIONALOP};
RuleRightSideElement _rhs73[] = {&_var, &_relationalOp, &_var, };
struct rule _rule73 = {.lhs = NT_BOOLEANEXPRESSION, .rhs = _rhs73, .isEpsilon = false, .rhsLength = 3};
struct ruleRightSideElement _tk_not = {true, .symbol.terminal = TK_NOT};
RuleRightSideElement _rhs74[] = {&_tk_not, &_tk_op, &_booleanExpression, &_tk_cl, };
struct rule _rule74 = {.lhs = NT_BOOLEANEXPRESSION, .rhs = _rhs74, .isEpsilon = false, .rhsLength = 4};
struct ruleRightSideElement _tk_num = {true, .symbol.terminal = TK_NUM};
RuleRightSideElement _rhs75[] = {&_tk_num, };
struct rule _rule75 = {.lhs = NT_VAR, .rhs = _rhs75, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_rnum = {true, .symbol.terminal = TK_RNUM};
RuleRightSideElement _rhs76[] = {&_tk_rnum, };
struct rule _rule76 = {.lhs = NT_VAR, .rhs = _rhs76, .isEpsilon = false, .rhsLength = 1};
RuleRightSideElement _rhs77[] = {&_singleOrRecId, };
struct rule _rule77 = {.lhs = NT_VAR, .rhs = _rhs77, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_and = {true, .symbol.terminal = TK_AND};
RuleRightSideElement _rhs78[] = {&_tk_and, };
struct rule _rule78 = {.lhs = NT_LOGICALOP, .rhs = _rhs78, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_or = {true, .symbol.terminal = TK_OR};
RuleRightSideElement _rhs79[] = {&_tk_or, };
struct rule _rule79 = {.lhs = NT_LOGICALOP, .rhs = _rhs79, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_lt = {true, .symbol.terminal = TK_LT};
RuleRightSideElement _rhs80[] = {&_tk_lt, };
struct rule _rule80 = {.lhs = NT_RELATIONALOP, .rhs = _rhs80, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_le = {true, .symbol.terminal = TK_LE};
RuleRightSideElement _rhs81[] = {&_tk_le, };
struct rule _rule81 = {.lhs = NT_RELATIONALOP, .rhs = _rhs81, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_eq = {true, .symbol.terminal = TK_EQ};
RuleRightSideElement _rhs82[] = {&_tk_eq, };
struct rule _rule82 = {.lhs = NT_RELATIONALOP, .rhs = _rhs82, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_gt = {true, .symbol.terminal = TK_GT};
RuleRightSideElement _rhs83[] = {&_tk_gt, };
struct rule _rule83 = {.lhs = NT_RELATIONALOP, .rhs = _rhs83, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_ge = {true, .symbol.terminal = TK_GE};
RuleRightSideElement _rhs84[] = {&_tk_ge, };
struct rule _rule84 = {.lhs = NT_RELATIONALOP, .rhs = _rhs84, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_ne = {true, .symbol.terminal = TK_NE};
RuleRightSideElement _rhs85[] = {&_tk_ne, };
struct rule _rule85 = {.lhs = NT_RELATIONALOP, .rhs = _rhs85, .isEpsilon = false, .rhsLength = 1};
struct ruleRightSideElement _tk_return = {true, .symbol.terminal = TK_RETURN};
struct ruleRightSideElement _optionalReturn = {false, .symbol.nonTerminal = NT_OPTIONALRETURN};
RuleRightSideElement _rhs86[] = {&_tk_return, &_optionalReturn, &_tk_sem, };
struct rule _rule86 = {.lhs = NT_RETURNSTMT, .rhs = _rhs86, .isEpsilon = false, .rhsLength = 3};
RuleRightSideElement _rhs87[] = {&_tk_sql, &_idList, &_tk_sqr, };
struct rule _rule87 = {.lhs = NT_OPTIONALRETURN, .rhs = _rhs87, .isEpsilon = false, .rhsLength = 3};
struct rule _rule88 = {.lhs = NT_OPTIONALRETURN, .isEpsilon = true};
struct ruleRightSideElement _moreIds = {false, .symbol.nonTerminal = NT_MOREIDS};
RuleRightSideElement _rhs89[] = {&_tk_id, &_moreIds, };
struct rule _rule89 = {.lhs = NT_IDLIST, .rhs = _rhs89, .isEpsilon = false, .rhsLength = 2};
RuleRightSideElement _rhs90[] = {&_tk_comma, &_idList, };
struct rule _rule90 = {.lhs = NT_MOREIDS, .rhs = _rhs90, .isEpsilon = false, .rhsLength = 2};
struct rule _rule91 = {.lhs = NT_MOREIDS, .isEpsilon = true};
struct ruleRightSideElement _tk_definetype = {true, .symbol.terminal = TK_DEFINETYPE};
struct ruleRightSideElement _A = {false, .symbol.nonTerminal = NT_A};
struct ruleRightSideElement _tk_as = {true, .symbol.terminal = TK_AS};
RuleRightSideElement _rhs92[] = {&_tk_definetype, &_A, &_tk_ruid, &_tk_as, &_tk_ruid, };
struct rule _rule92 = {.lhs = NT_DEFINETYPESTMT, .rhs = _rhs92, .isEpsilon = false, .rhsLength = 5};
RuleRightSideElement _rhs93[] = {&_tk_record, };
struct rule _rule93 = {.lhs = NT_A, .rhs = _rhs93, .isEpsilon = false, .rhsLength = 1};
RuleRightSideElement _rhs94[] = {&_tk_union, };
struct rule _rule94 = {.lhs = NT_A, .rhs = _rhs94, .isEpsilon = false, .rhsLength = 1};

Rule _grammarRules[] = {&_rule0, &_rule1, &_rule2, &_rule3, &_rule4, &_rule5, &_rule6, &_rule7, &_rule8, &_rule9, &_rule10, &_rule11, &_rule12, &_rule13, &_rule14, &_rule15, &_rule16, &_rule17, &_rule18, &_rule19, &_rule20, &_rule21, &_rule22, &_rule23, &_rule24, &_rule25, &_rule26, &_rule27, &_rule28, &_rule29, &_rule30, &_rule31, &_rule32, &_rule33, &_rule34, &_rule35, &_rule36, &_rule37, &_rule38, &_rule39, &_rule40, &_rule41, &_rule42, &_rule43, &_rule44, &_rule45, &_rule46, &_rule47, &_rule48, &_rule49, &_rule50, &_rule51, &_rule52, &_rule53, &_rule54, &_rule55, &_rule56, &_rule57, &_rule58, &_rule59, &_rule60, &_rule61, &_rule62, &_rule63, &_rule64, &_rule65, &_rule66, &_rule67, &_rule68, &_rule69, &_rule70, &_rule71, &_rule72, &_rule73, &_rule74, &_rule75, &_rule76, &_rule77, &_rule78, &_rule79, &_rule80, &_rule81, &_rule82, &_rule83, &_rule84, &_rule85, &_rule86, &_rule87, &_rule88, &_rule89, &_rule90, &_rule91, &_rule92, &_rule93, &_rule94, };
struct grammar languageGrammar = {NT_PROGRAM, 95, _grammarRules};
#endif
